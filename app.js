import Alpine from './node_modules/alpinejs/dist/module.esm.js';
import OpString from './node_modules/opstring/dist/OpString.min.js';

window.Alpine = Alpine;
window.OpString = OpString;

document.addEventListener('alpine:init', () => {
    let opString;

    Alpine.data('OpStringBuilder', () => ({
        skipCharCodes: [
            826, 847, 888, 889, 896, 897, 898, 899, 907, 909, 930, 939, 979, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 
            1328, 1367, 1368, 1376, 1416, 1419, 1420, 1421, 1422, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 
            1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 
            1452, 1453, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1467, 1468, 1469, 1471, 1473, 1474, 
            1476, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1515, 1516, 1517, 1518, 1519, 1525, 1526, 1527, 1528, 
            1529, 1530, 1531, 1532, 1533, 1534, 1535, 1537, 1540, 1550, 1552, 1553, 1555, 1556, 1557, 1558, 1559, 1560, 
            1561, 1564, 1565, 1611, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 
            1627, 1628, 1629, 1630, 1648, 1652, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 
            1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1806, 1807, 1842, 1867, 1868, 1958, 1959, 1961, 1962, 1963, 
            1964, 1965, 1966, 1967, 1968, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 
            1983, 2039, 2043, 2044, 2070, 2071, 2072, 2073, 2075, 2092, 2093, 2094, 2095, 2111, 2140, 2141, 2143, 2144, 
            2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 
            2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 
            2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 
            2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2229, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 
            2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 
            2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 
            2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 
            2301, 2302, 2436, 2445, 2446, 2449, 2450, 2473, 2481, 2483, 2484, 2485, 2490, 2491, 2501, 2502, 2505, 2506, 
            2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2520, 2521, 2522, 2523, 2526, 2532, 2533, 2556, 2557, 2558, 
            2559, 2560, 2564, 2571, 2572, 2573, 2574, 2577, 2578, 2601, 2609, 2612, 2615, 2618, 2619, 2621, 2627, 2628, 
            2629, 2630, 2633, 2634, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2653, 2655, 2656, 
            2657, 2658, 2659, 2660, 2661, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2692, 
            2702, 2706, 2729, 2737, 2740, 2746, 2747, 2758, 2762, 2766, 2767, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 
            2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2788, 2789, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2810, 
            2811, 2812, 2813, 2814, 2815, 2816, 2820, 2829, 2830, 2833, 2834, 2857, 2865, 2868, 2874, 2875, 2885, 2886, 
            2889, 2890, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2904, 2905, 2906, 2907, 2910, 2916, 2917, 2936, 
            2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2948, 2955, 2956, 2957, 2961, 2966, 2967, 2968, 2971, 
            2973, 2976, 2977, 2978, 2981, 2982, 2983, 2987, 2988, 2989, 3002, 3003, 3004, 3005, 3011, 3012, 3013, 3017, 
            3022, 3023, 3025, 3026, 3027, 3028, 3029, 3030, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 
            3042, 3043, 3067, 3068, 3069, 3070, 3071, 3076, 3085, 3089, 3113, 3130, 3131, 3132, 3141, 3145, 3150, 3151, 
            3152, 3153, 3154, 3155, 3156, 3159, 3163, 3164, 3165, 3166, 3167, 3172, 3173, 3184, 3185, 3186, 3187, 3188, 
            3189, 3190, 3191, 3204, 3213, 3217, 3241, 3252, 3258, 3259, 3269, 3273, 3278, 3279, 3280, 3281, 3282, 3283, 
            3284, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3295, 3300, 3301, 3312, 3315, 3316, 3317, 3318, 3319, 3320, 
            3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3332, 3341, 3345, 3387, 3388, 3397, 3401, 3407, 3408, 3409, 
            3410, 3411, 3412, 3413, 3414, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3428, 3429, 3446, 3447, 3448, 3456, 
            3457, 3460, 3479, 3480, 3481, 3506, 3516, 3518, 3519, 3524, 3527, 3528, 3529, 3531, 3532, 3533, 3534, 3540, 
            3541, 3543, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 
            3568, 3569, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3643, 3644, 3645, 3646, 
            3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 
            3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 
            3712, 3715, 3717, 3718, 3721, 3723, 3724, 3726, 3727, 3728, 3729, 3730, 3731, 3736, 3744, 3748, 3750, 3752, 
            3753, 3756, 3761, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3774, 3775, 3781, 3783, 3784, 
            3785, 3786, 3787, 3789, 3790, 3791, 3802, 3803, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 
            3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 
            3834, 3835, 3836, 3837, 3838, 3839, 3912, 3949, 3950, 3951, 3952, 3980, 3981, 3982, 3983, 3992, 4029, 4032, 
            4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4048, 4049, 4051, 4052, 4053, 
            4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 
            4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 
            4090, 4091, 4092, 4093, 4094, 4095, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4442, 4443, 
            4444, 4445, 4446, 4447, 4448, 4515, 4516, 4517, 4518, 4519, 4602, 4603, 4604, 4605, 4606, 4607, 4681, 4686, 
            4687, 4695, 4697, 4702, 4703, 4745, 4750, 4751, 4785, 4790, 4791, 4799, 4801, 4806, 4807, 4823, 4881, 4886, 
            4887, 4955, 4956, 4989, 4990, 4991, 5018, 5019, 5020, 5021, 5022, 5023, 5120,
        ],

        init() {
            const startAtCharCode = 192;
            const neededValues = 4096;
            const lastCounter = startAtCharCode+neededValues+this.skipCharCodes.length;
            const values = {};
            for (let i = startAtCharCode; i <= lastCounter; i++) {
                if (! this.skipCharCodes.includes(i)) {
                    values[i] = i-startAtCharCode;
                }
            }
            
            opString = new OpString({
                operations: {
                    'A': (...args) => {
                        console.debug('> Values: ', ...args);
                    },
                },
                values,
            });
            
            let str = '';
            for (const [symbol, val] of Object.entries(opString.getValues())) {
                str += String.fromCharCode(symbol);
            }
            console.debug(str);

            const myValues = [2209, 2345, 2709, 3250, 3896, 3888, 4281, 4619];
            opString.append('A', myValues);
            console.debug('> Sequence:', opString.getSequence());
            opString.execute();
        },

        copyCharCode(event) {
            this.skipCharCodes.push(Number(event.target.innerText));
        },

        printSkipCharCodes() {
            this.skipCharCodes.sort((a, b) => a-b);
            let str = '';
            for (let i = 0; i < this.skipCharCodes.length; i++) {
                str += this.skipCharCodes[i] + ', ';
                if (i !== 0 && i%18 === 0) {
                    str += '\n';
                }
            }
            console.debug(str);
        },

        registerOperation(event) {
            console.debug('registerOperation');
        },

        registerValue(event) {
            console.debug('registerValue');
        },

        registerValuesRange(event) {
            console.debug('registerValuesRange');
        },

        operations() {
            return opString.getOperations();
        },

        values() {
            return opString.getValues();
        },

        sequence() {
            return opString.getSequence();
        },
    }));
});

Alpine.start();