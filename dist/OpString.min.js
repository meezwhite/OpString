/**!
 * OpString
 * 
 * @version 0.1.0
 * @license MIT
 * @copyright meezwhite
 */
export default class OpString{version="0.1.0";operationsStore={};valuesStore={};maxOperationsSequenceLength;ignoreWarnings=!1;strictMode=!1;#e="";#t=[];#r=1;#o=0;#i=1;#n=2;#s=0;#a=65535;#h=["operationsSequence","operationsStore","valuesStore","maxOperationsSequenceLength","ignoreWarnings","strictMode"];constructor(e){try{if(this.#c("constructor",arguments),void 0!==e){if(void 0!==e.operationsStore)for(const[t,r]of Object.entries(e.operationsStore))this.registerOperation(t,r);if(void 0!==e.valuesStore)for(const[t,r]of Object.entries(e.valuesStore))this.registerValue(t,r);void 0!==e.maxOperationsSequenceLength&&(this.maxOperationsSequenceLength=e.maxOperationsSequenceLength),void 0!==e.operationsSequence&&this.setOperationsSequence(e.operationsSequence),"boolean"==typeof e.ignoreWarnings&&(this.ignoreWarnings=e.ignoreWarnings),"boolean"==typeof e.strictMode&&(this.strictMode=e.strictMode)}}catch(e){this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}}append(e,t){try{this.#c("append",arguments),this.#t.push({id:this.#r++,operation:this.#u(e),values:this.#g(t)}),this.#l()}catch(e){this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}}insert(e,t,r){try{this.#c("add",arguments),this.#t.splice(e,0,{id:this.#r++,operation:this.#u(t),values:this.#g(r)}),this.#l()}catch(e){this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}}prepend(e,t){try{this.#c("prepend",arguments),this.#t.unshift({id:this.#r++,operation:this.#u(e),values:this.#g(t)}),this.#l()}catch(e){this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}}remove(e){try{this.#c("remove",arguments);const t=this.#t.findIndex((t=>t.id===e));if(-1===t)throw new ReferenceError(`Cannot remove operation with id ${e}, since not found.`);this.#t.splice(t,1),this.#l()}catch(e){return this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`),!1}return!0}#l(){let e="";for(let t=0;t<this.#t.length;t++){e+=String.fromCharCode(this.#t[t].operation);for(let r=0;r<this.#t[t].values.length;r++)e+=String.fromCharCode(this.#t[t].values[r])}this.#e=e}getOperationsSequence(){return this.#e}getOperationsSequenceData(){return this.#t}setOperationsSequence(e){try{this.#c("setOperationsSequence",arguments),this.#e=e,this.#t=[];for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);if(this.operationsStore[r]){const o=[];for(let r=t+1;r<e.length;r++){const t=e.charCodeAt(r);if(this.valuesStore[t])o.push(t);else{if(this.operationsStore[t])break;this.registerValue(t,null),o.push(t)}}this.#t.push({id:this.#r++,operation:r,values:o})}else this.registerOperation(r,(()=>{}))}}catch(e){this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}}registerOperation(e,t){try{this.#c("registerOperation",arguments);const r=this.#d(e);r===this.#i?this.operationsStore[e.charCodeAt(0)]=t:r===this.#n&&(this.operationsStore[e]=t)}catch(e){this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}}registerValue(e,t){try{this.#c("registerValue",arguments);const r=this.#d(e);r===this.#i?this.valuesStore[e.charCodeAt(0)]=t:r===this.#n&&(this.valuesStore[e]=t)}catch(e){this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}}execute(e){const t=void 0===e;let r=!1;try{t?this.#c("executeMain",[this.#e]):this.#c("executeProvided",arguments)}catch(e){r=!0,this.#p(`[${this.constructor.name}] ${e.name}: ${e.message}`)}finally{(!r||r&&!this.strictMode)&&(t?this.#m():this.#y(e))}}#y(e){for(let t=0;t<e.length;t++){const r=this.operationsStore[e.charCodeAt(t)];if(r){const o=[];for(let r=t+1;r<e.length;r++){const t=e.charCodeAt(r),i=this.valuesStore[t];if(i)o.push(i);else{if(this.operationsStore[t])break;o.push(void 0)}}r(...o)}}}#m(){for(let e=0;e<this.#t.length;e++){const t=this.#t[e].operation,r=this.operationsStore[t];if(r){const t=[];for(let r=0;r<this.#t[e].values.length;r++){const o=this.#t[e].values[r],i=this.valuesStore[o];if(i)t.push(i);else{if(this.operationsStore[o])break;t.push(void 0)}}r(...t)}}}#d(e){const t=/^\d+$/.test(e);return t?this.#n:t||"string"!=typeof e?this.#o:this.#i}#u(e){return this.#d(e)===this.#i?e.charCodeAt(0):e}#g(e){return e.map((e=>{const t=this.#d(e);return t===this.#i?e.charCodeAt(0):t===this.#n?e:null}))}#f(e,t=[]){let r=!0;return 0!==t.length&&(r=Object.keys(e).every((e=>t.includes(e)))),"object"==typeof e&&null!==e&&!Array.isArray(e)&&Object.keys(e).length>0&&r&&void 0!==e.constructor&&e.constructor.prototype.hasOwnProperty("isPrototypeOf")}#S(e){return e>=this.#s&&e<=this.#a}#v(e){return"number"==typeof e&&Number.isSafeInteger(e)&&e>0}#b(e){return!(void 0!==this.maxOperationsSequenceLength&&e.length>this.maxOperationsSequenceLength)}#p(e){this.strictMode?console.error(e):this.ignoreWarnings||console.warn(e)}#c(e,t){let r;switch(e){case"constructor":if(void 0!==t[0]){if(!this.#f(t[0],this.#h)){const e=this.#h.slice(0,-1).map((e=>`'${e}'`)).join(", "),t=this.#h[this.#h.length-1];throw new TypeError(`The 'config' parameter, if defined, must be a non-empty plain object with valid 'config' properties; these are ${e} and '${t}'.`)}if(void 0!==t[0].operationsSequence&&"string"!=typeof t[0].operationsSequence)throw new TypeError("The 'config.operationsSequence' property, if defined, must be a string.");if(void 0!==t[0].operationsStore&&!this.#f(t[0].operationsStore))throw new TypeError("The 'config.operationsStore' property, if defined, must be a non-empty plain object.");if(void 0!==t[0].valuesStore&&!this.#f(t[0].valuesStore))throw new TypeError("The 'config.valuesStore' property, if defined, must be a non-empty plain object");if(void 0!==t[0].maxOperationsSequenceLength&&!this.#v(t[0].maxOperationsSequenceLength))throw new TypeError("The 'config.maxOperationsSequenceLength' property, if defined, must be a positive safe integer.");if(void 0!==t[0].ignoreWarnings&&"boolean"!=typeof t[0].ignoreWarnings)throw new TypeError("The 'config.ignoreWarnings' property, if defined, must be a boolean.");if(void 0!==t[0].strictMode&&"boolean"!=typeof t[0].strictMode)throw new TypeError("The 'config.strictMode' property, if defined, must be a boolean.")}break;case"remove":if(!this.#v(t[0]))throw new TypeError(`Cannot remove operation with id '${t[0]}'. The id must be a positive safe integer.`);break;case"setOperationsSequence":if(r=`Cannot ${e} to '${t[0]}'. The `,void 0!==t[0]&&"string"!=typeof t[0])throw new TypeError(`${r}operations sequence must be a string.`);if("string"==typeof t[0]&&!this.#b(t[0]))throw new RangeError(`${r}provided operations sequence exceeds the configured 'maxOperationsSequenceLength' of ${this.maxOperationsSequenceLength} characters.`);break;case"append":case"insert":case"prepend":case"registerOperation":case"registerValue":"insert"===e&&(t=[t[1],t[2],t[0]]);const o=["append","insert","prepend"].includes(e);if(r=`Cannot ${e}${o?" operation":""} with symbol '${t[0]}'`,"insert"===e){const e="number"==typeof t[2];if(!e||e&&t[2]<0)throw new TypeError(`${r} at index '${t[2]}'. The index must be a non-negative integer.`)}const i="symbol must be a string or an integer.",n="string symbol must consist of a single character.",s=`integer symbol must be within the range of ${this.#s} and ${this.#a}.`,a=this.#d(t[0]);if(a===this.#o)throw new TypeError(`${r}. The ${i}`);if(a===this.#i&&1!==t[0].length)throw new SyntaxError(`${r}. A ${n}`);if(a===this.#n&&!this.#S(t[0]))throw new RangeError(`${r}. An ${s}`);if(o&&void 0!==t[1]){const e=Array.isArray(t[1]);if(!e||e&&0===t[1].length)throw new TypeError(`${r}. The 'values' parameter must be an non-empty array.`);const o=` and values '${t[1]}'. The 'values' array contains an invalid symbol. Each `;for(let e=0;e<t[1].length;e++){const a=this.#d(t[1][e]);if(a===this.#o)throw new TypeError(`${r}${o}${i}`);if(a===this.#i&&1!==t[1][e].length)throw new SyntaxError(`${r}${o}${n}`);if(a===this.#n&&!this.#S(t[1][e]))throw new RangeError(`${r}${o}${s}`)}}if("registerOperation"===e){if("function"!=typeof t[1])throw new TypeError(`${r}. The 'callback' parameter must be a function.`)}else if("registerValue"===e&&void 0===t[1])throw new TypeError(`${r}. The 'value' parameter cannot be undefined.`);break;case"executeMain":case"executeProvided":const h=e.substring(7).toLowerCase();if(r=`Cannot ${e="execute"} the ${h} operations sequence '${t[0]}'. The `,void 0!==t[0]&&"string"!=typeof t[0])throw new TypeError(`${r}operations sequence must be a string.`);if("string"==typeof t[0]&&!this.#b(t[0]))throw new RangeError(`${r}${h} operations sequence exceeds the configured 'maxOperationsSequenceLength' of ${this.maxOperationsSequenceLength} characters.`)}}}
